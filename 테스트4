#1. 데이터
import numpy as np
from sklearn.metrics import log_loss
x = np.array([1,2,3,])       
y = np.array([1,2,3,])

#2. .모델구성 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential() 
model.add(Dense(4, input_dim=1))         
model.add(Dense(5))  # 오차범위가 훈련양으로 안줄어들면 히든레이어를 늘려도되고 node(뉴런)의 갯수를 늘려도 된다
model.add(Dense(3))  
model.add(Dense(2))  
model.add(Dense(1)) 

#3. 컴파일, 훈련
model.compile(loss='mse', optimizer='adam')         
model.fit(x, y, epochs=230) #가중치 보관 밑 xy로 

#4. 평가, 예측
loss = model.evaluate(x, y) # x y 값을 평가할것이다 그 값을 로스에 넣어주세요
print("loss : ", loss) #y=wx+b x값을 범위 밖 수를 넣을때 y는 예측값

result = model.predict([188])
print('윗집의 예측값은 : ', result) # 항상 결과값은 밑에 주석으로 첨부할것

# loss :  4.8553754739650776e-14
# 83의 예측값은 :  [[83.00007]]





------------------------
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#1. date
x = np.array([1,2,3,4,5,6,7,8,9,10])
y = np.array([1,2,3,4,5,6,7,8,9,10])
# x_train =np.array([1,2,3,4,5,6,7])
# x_test = np.array([8,9,10])
# y_train =np.array([1,2,3,4,5,6,7])
# y_test = np.array([8,9,10])

# [검색] train과 test를 섞어서 7:3으로 찾을 수 있는 방법 찾아라 
# x_train = x[0:7]    # 성능이 데이터가 작고 완전히 정제된 데이터 이기에
# x_test = x[0:7]       # 이렇게 할수있음 ( 이런식으론 절대 안한다) 성능 책임x
# y_train = y[7:10]     # 1~10 연산이 오래걸려 30%를 자른다면 부분부분 자른다
# y_test = y[7:10]      # 훈련 셋을 테스트 셋으로 옮길때 ( 16번 )
                     # 
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4,
                                                    shuffle=False,
                                                    reandom_state=1004)
print('x_teain shape:', x_train.shape)
print('x_test shape:', x_test.shape)
print('y_train shape:', y_train.shape)
print('y_test shape:', y_test.shape)

x_train shape 



#2. model             딥러닝 인풋1개 아웃풋1개 히든레이어 10개
model = Sequential()
model.add(Dense(10, input_dim=1))
model.add(Dense(1))

#3. 컴파일 , 훈련 
model.compile(loss='mse', optimizer='adam')
model.fit(x_train, y_train, epochs=300 , batch_size=1)

#4. 평가 예측                                            # 훈련은 다 시켜주면 좋다 
loss = model.evaluate(x_test, y_test)
print('loss', loss)
result = model.predict([11])
print('11의 예측값 : ',result)
