#1. 데이터
import numpy as np
from sklearn.metrics import log_loss
x = np.array([1,2,3,5,4])       
y = np.array([1,2,3,4,5])

#2. .모델구성 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential() 
model.add(Dense(12, input_dim=1))         
model.add(Dense(10))  # 오차범위가 훈련양으로 안줄어들면 히든레이어를 늘려도되고 node(뉴런)의 갯수를 늘려도 된다
model.add(Dense(8))  
model.add(Dense(6))  
model.add(Dense(4)) 
model.add(Dense(4)) 
model.add(Dense(1)) 

#3. 컴파일, 훈련
model.compile(loss='mse', optimizer='adam')     
model.fit(x, y, epochs=2000) #가중치 보관 밑 xy로 # 훈련

#4. 평가, 예측
loss = model.evaluate(x, y) # x y 값을 평가할것이다 그 값을 로스에 넣어주세요
print("loss : ", loss) #y=wx+b x값을 범위 밖 수를 넣을때 y는 예측값

result = model.predict([13])
print('13의 예측값은 : ', result) # 항상 결과값은 밑에 주석으로 첨부할것

# loss :  0.4065370559692383
# 6의 예측값은 :  [[6.013918]]

------------------------------------------------------------------------------------------
 # id 컬럼 숫자의 변화는 가치가 있지않고 번호이다 데이터이기 때문에 
; id  hour  hour_bef_temperature  hour_bef_precipitation  hour_bef_windspeed  hour_bef_humidity  hour_bef_visibility  hour_bef_ozone  hour_bef_pm10  hour_bef_pm2.5  count
; 0        3    20                  16.3                     1.0                 1.5               89.0                576.0           0.027           76.0            33.0   49.0
; 1        6    13                  20.1                     0.0                 1.4               48.0                916.0           0.042           73.0            40.0  159.0
; 2        7     6                  13.9                     0.0                 0.7               79.0               1382.0           0.033           32.0            19.0   26.0
; 3        8    23                   8.1                     0.0                 2.7               54.0                946.0           0.040           75.0            64.0   57.0
; 4        9    18                  29.5                     0.0                 4.8                7.0               2000.0           0.057           27.0            11.0  431.0
; ...    ...   ...                   ...                     ...                 ...                ...                  ...             ...            ...             ...    ...
; 1454  2174     4                  16.8                     0.0                 1.6               53.0               2000.0           0.031           37.0            27.0   21.0
; 1455  2175     3                  10.8                     0.0                 3.8               45.0               2000.0           0.039           34.0            19.0   20.0
; 1456  2176     5                  18.3                     0.0                 1.9               54.0               2000.0           0.009           30.0            21.0   22.0
; 1457  2178    21                  20.7                     0.0                 3.7               37.0               1395.0           0.082           71.0            36.0  216.0
; 1458  2179    17                  21.1                     0.0                 3.1               47.0               1973.0           0.046           38.0            17.0  170.0


# 훈련과 평가는 train.csv 로 한다 훈련을 할때 x y 를 비교하면서 계속 훈련
# test.csv 셋에는 count가 빠져있다 프레딕트만 하라 = 결과값이 나오기 때문에
# train.csv 로 지표잡고 평가하고 model.predict 를 한후 test.csv 로 제출하라 

#               hour  hour_bef_temperature  hour_bef_precipitation  hour_bef_windspeed  hour_bef_humidity  hour_bef_visibility  hour_bef_ozone  hour_bef_pm10  hour_bef_pm2.5        count
# count  1459.000000           1457.000000             1457.000000         1450.000000        1457.000000          1457.000000     1383.000000    1369.000000     1342.000000  1459.000000
# mean     11.493489             16.717433                0.031572            2.479034          52.231297          1405.216884        0.039149      57.168736       30.327124   108.563400
# std       6.922790              5.239150                0.174917            1.378265          20.370387           583.131708        0.019509      31.771019       14.713252    82.631733
# min       0.000000              3.100000                0.000000            0.000000           7.000000            78.000000        0.003000       9.000000        8.000000     1.000000
# 25%       5.500000             12.800000                0.000000            1.400000          36.000000           879.000000        0.025500      36.000000       20.000000    37.000000
# 50%      11.000000             16.600000                0.000000            2.300000          51.000000          1577.000000        0.039000      51.000000       26.000000    96.000000
# 75%      17.500000             20.100000                0.000000            3.400000          69.000000          1994.000000        0.052000      69.000000       37.000000   150.000000
# max      23.000000             30.000000                1.000000            8.000000          99.000000          2000.000000        0.125000     269.000000       90.000000   431.000000

# mean 평균 std 표준편차 min 최솟값 max 최대값

#훈련용 데이터에 y값은 결측이없다 count 1459 = y값 


# 슬라이싱 ? 


                            #널의 갯수 
# hour                        0
# hour_bef_temperature        2
# hour_bef_precipitation      2
# hour_bef_windspeed          9
# hour_bef_humidity           2
# hour_bef_visibility         2
# hour_bef_ozone             76
# hour_bef_pm10              90
# hour_bef_pm2.5            117
# count                       0
# dtype: int64
